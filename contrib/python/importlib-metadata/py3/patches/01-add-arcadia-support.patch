--- contrib/python/importlib-metadata/py3/.dist-info/METADATA	(index)
+++ contrib/python/importlib-metadata/py3/.dist-info/METADATA	(working tree)
@@ -15,1 +15,0 @@ Classifier: License :: OSI Approved :: Apache Software License
-Requires-Dist: zipp (>=0.5)
--- contrib/python/importlib-metadata/py3/importlib_metadata/__init__.py	(index)
+++ contrib/python/importlib-metadata/py3/importlib_metadata/__init__.py	(working tree)
@@ -6,1 +6,0 @@ import re
-import zipp
@@ -796,6 +795,63 @@ class PathDistribution(Distribution):
         return name
 
 
+class ArcadiaDistribution(Distribution):
+
+    def __init__(self, prefix):
+        self.prefix = prefix
+
+    def read_text(self, filename):
+        from library.python.resource import resfs_read
+        data = resfs_read('{}{}'.format(self.prefix, filename))
+        if data:
+            return data.decode('utf-8')
+    read_text.__doc__ = Distribution.read_text.__doc__
+
+    def locate_file(self, path):
+        return '{}{}'.format(self.prefix, path)
+
+
+@install
+class ArcadiaMetadataFinder(NullFinder, DistributionFinder):
+
+    prefixes = {}
+
+    @classmethod
+    def find_distributions(cls, context=DistributionFinder.Context()):
+        found = cls._search_prefixes(context.name)
+        return map(ArcadiaDistribution, found)
+
+    @classmethod
+    def _init_prefixes(cls):
+        from library.python.resource import resfs_read, resfs_files
+        cls.prefixes.clear()
+
+        METADATA_NAME = re.compile('^Name: (.*)$', re.MULTILINE)
+
+        for resource in resfs_files():
+            if not resource.endswith('METADATA'):
+                continue
+            data = resfs_read(resource).decode('utf-8')
+            metadata_name = METADATA_NAME.search(data)
+            if metadata_name:
+                metadata_name = Prepared(metadata_name.group(1))
+                cls.prefixes[metadata_name.normalized] = resource[:-len('METADATA')]
+
+    @classmethod
+    def _search_prefixes(cls, name):
+        if not cls.prefixes:
+            cls._init_prefixes()
+
+        if name:
+            try:
+                yield cls.prefixes[Prepared(name).normalized]
+            except KeyError:
+                raise PackageNotFoundError(name)
+        else:
+            for prefix in sorted(cls.prefixes.values()):
+                yield prefix
+
+
 def distribution(distribution_name):
     """Get the ``Distribution`` instance for the named package.
 
